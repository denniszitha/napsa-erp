from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_RIGHT
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import base64
from typing import List, Dict, Any
import os

from sqlalchemy.orm import Session
from app.models.risk import Risk, RiskStatus, RiskCategoryEnum
from app.models.control import Control, ControlStatus
from app.models.kri import KeyRiskIndicator, KRIStatus

class ReportService:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#1e3a8a'),
            alignment=TA_CENTER,
            spaceAfter=30
        )
        
    def generate_risk_report(self, db: Session, user_name: str) -> bytes:
        """Generate comprehensive risk report PDF"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        story = []
        
        # Title
        story.append(Paragraph("NAPSA Enterprise Risk Management Report", self.title_style))
        story.append(Spacer(1, 0.2*inch))
        
        # Report info
        info_style = ParagraphStyle('InfoStyle', fontSize=10, textColor=colors.grey)
        story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", info_style))
        story.append(Paragraph(f"Generated by: {user_name}", info_style))
        story.append(Spacer(1, 0.5*inch))
        
        # Executive Summary
        story.append(Paragraph("Executive Summary", self.styles['Heading2']))
        story.append(Spacer(1, 0.2*inch))
        
        # Get statistics
        total_risks = db.query(Risk).count()
        active_risks = db.query(Risk).filter(Risk.status == RiskStatus.active).count()
        high_risks = db.query(Risk).filter(Risk.inherent_risk_score >= 15).count()
        total_controls = db.query(Control).count()
        effective_controls = db.query(Control).filter(Control.status == ControlStatus.effective).count()
        
        summary_data = [
            ['Metric', 'Value'],
            ['Total Risks', str(total_risks)],
            ['Active Risks', str(active_risks)],
            ['High Priority Risks', str(high_risks)],
            ['Total Controls', str(total_controls)],
            ['Effective Controls', str(effective_controls)],
            ['Control Effectiveness Rate', f"{(effective_controls/total_controls*100):.1f}%" if total_controls > 0 else "N/A"]
        ]
        
        summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(summary_table)
        story.append(PageBreak())
        
        # Risk Details
        story.append(Paragraph("Risk Details", self.styles['Heading2']))
        story.append(Spacer(1, 0.2*inch))
        
        risks = db.query(Risk).filter(Risk.status == RiskStatus.active).all()
        
        risk_data = [['Risk Title', 'Category', 'Likelihood', 'Impact', 'Risk Score', 'Status']]
        for risk in risks:
            risk_data.append([
                risk.title[:30] + '...' if len(risk.title) > 30 else risk.title,
                risk.category.value,
                str(risk.likelihood),
                str(risk.impact),
                str(risk.inherent_risk_score),
                risk.status.value
            ])
        
        risk_table = Table(risk_data, colWidths=[2.5*inch, 1.2*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.9*inch])
        risk_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.whitesmoke),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
        ]))
        story.append(risk_table)
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.read()
    
    def generate_kri_report(self, db: Session) -> bytes:
        """Generate KRI status report"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        story = []
        
        # Title
        story.append(Paragraph("Key Risk Indicators Report", self.title_style))
        story.append(Spacer(1, 0.3*inch))
        
        # KRI Summary
        kris = db.query(KeyRiskIndicator).all()
        
        kri_data = [['KRI Name', 'Current Value', 'Target', 'Status', 'Trend']]
        for kri in kris:
            status_color = colors.green if kri.status == KRIStatus.normal else \
                          colors.orange if kri.status == KRIStatus.warning else colors.red
            
            kri_data.append([
                kri.name,
                f"{kri.current_value:.1f}" if kri.current_value else "N/A",
                f"{kri.target_value:.1f}",
                kri.status.value.upper(),
                kri.trend or "stable"
            ])
        
        kri_table = Table(kri_data, colWidths=[2.5*inch, 1.2*inch, 1*inch, 1*inch, 1*inch])
        kri_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(kri_table)
        
        doc.build(story)
        buffer.seek(0)
        return buffer.read()

report_service = ReportService()
